{"version":3,"sources":["components/Title/index.tsx","components/InfoField/index.tsx","components/InfoBlock/index.tsx","config/index.tsx","components/Controls/index.tsx","helpers/formatToLocale.tsx","components/TwilightBar/helpers.tsx","components/TwilightBar/useTwilightBar.tsx","components/TwilightBar/index.tsx","components/Loader/index.tsx","components/MainBlock/index.tsx","components/MainBlock/useMainBlock.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Title","formattedDate","className","InfoField","data","InfoBlock","weatherData","preparedData","Sunrise","sunrise","Sunset","sunset","Length","day_length","Object","entries","map","entry","key","ControlVariants","title","type","value","preSymbols","Controls","changeDate","handleClick","Date","now","Number","onClick","formatToLocale","time","array","split","hours","indexOf","formattedHours","prepareData","barWidth","newOptionsStart","civil_twilight_begin","newOptionsEnd","civil_twilight_end","minutesAdjustment","minutes","start","end","useTwilightBar","useState","newData","setNewData","prevState","ref","useRef","useEffect","current","usePreviousState","oldData","tickStart","tickEnd","animationStart","i","action","setTimeout","style","width","transition","background","TwilightBar","Loader","MainBlock","date","setWeatherData","useMemo","getMonth","getDate","getFullYear","preparedDate","navigator","geolocation","getCurrentPosition","coords","fetch","latitude","longitude","then","response","json","results","dayLength","formattedData","catch","e","console","log","message","warn","showData","keys","length","useMainBlock","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.9e2a7c0c.chunk.js","sourcesContent":["import React from 'react'\n\ntype TTitle = {\n  formattedDate: string\n}\n\nexport const Title = ({ formattedDate }: TTitle) => {\n  return (\n    <div className='title'>\n      {formattedDate}\n    </div>\n  )\n}\n","import React from 'react'\n\ntype TInfoField = {\n  data: Array<string>\n}\n\nexport const InfoField = ({ data }: TInfoField) => (\n  <li className='info-block__elem'>\n    <span className='info-field__key'>\n      {data[0]}\n    </span>\n    <span className='info-field__devider'>: </span>\n    <span className='info-field__value'>\n      {data[1]}\n    </span>\n  </li>\n)\n","import React from 'react'\n\nimport { InfoField } from '../InfoField'\n\ntype TInfoBlock = {\n  weatherData: Record<string, string>\n}\n\nexport const InfoBlock = ({ weatherData }: TInfoBlock) => {\n  const preparedData = {\n    Sunrise: weatherData.sunrise,\n    Sunset: weatherData.sunset,\n    Length: weatherData.day_length,\n  }\n\n  return (\n    <div className='info-block'>\n      <ul className='info-block__list'>\n        {Object.entries(preparedData).map(entry => (\n          <InfoField key={entry[0]} data={entry} />\n        ))}\n      </ul>\n    </div>\n  )\n}\n","export const BASE_API = `https://api.sunrise-sunset.org/json`\n\nexport const ControlVariants = [\n  {\n    title: 'days',\n    type: 'backward',\n    value: '7'\n  },\n  {\n    title: 'day',\n    type: 'backward',\n    value: '1'\n  },\n  {\n    title: 'day',\n    type: 'forward',\n    value: '1'\n  },\n  {\n    title: 'days',\n    type: 'forward',\n    value: '7'\n  },\n]\n\nexport const preSymbols = {\n  PLUS: '+',\n  MINUS: '-'\n}\n\nexport const defaultBarWidth = 1440","import React from 'react'\n\nimport { ControlVariants, preSymbols } from '../../config'\n\ntype TControls = {\n  changeDate: (value: Date) => void\n}\n\nexport const Controls = ({ changeDate }: TControls) => {\n  const handleClick = (value: string, type: string) => () => {\n    if (type === 'forward') {\n      return changeDate(new Date(Date.now() + Number(value) * 24 * 60 * 60 * 1000))\n    } \n    else {\n      return changeDate(new Date(Date.now() - Number(value) * 24 * 60 * 60 * 1000))\n    }\n  }\n\n  return (\n    <div className='controls__wrapper'>\n      <ul className='controls__list'>\n        {ControlVariants.map(({\n          type,\n          value,\n          title\n        }) => (\n          <button key={`${type}-${value}`} onClick={handleClick(value, type)}>\n            {type === 'backward' ? preSymbols.MINUS : preSymbols.PLUS} {value} {title}\n          </button>\n        ))}\n      </ul>\n    </div>\n  )\n}\n","export const formatToLocale = (time: string) => {\n  const array = time.split(':')\n  const hours = time.indexOf('PM') > 0 ? 12 : 0 \n  const formattedHours = Number(array[0]) + hours\n  \n  return `${formattedHours}:${array[1]}`\n}","import { formatToLocale } from '../../helpers/formatToLocale'\nimport { defaultBarWidth } from '../../config'\nimport { TAnimationStart } from './types'\n\n// Animation function\nexport const animationStart = ({\n  data,\n  i = 1,\n  action,\n  tickStart,\n  tickEnd, \n}: TAnimationStart): void => {\n  if (i === 20) {\n    return\n  }\n  setTimeout(() => action({ \n    start: data.start + tickStart * i,\n    end: data.end + tickEnd * i }),\n    100 + 20 * i\n  )\n\n  return animationStart({ \n    data, \n    i: i + 1, \n    action, \n    tickStart, \n    tickEnd \n  })\n}\n\n// prepare data for gradient in %\nexport const prepareData = (data: Record<string, string>, barWidth: number) => {\n  const newOptionsStart = formatToLocale(data.civil_twilight_begin).split(':')\n  const newOptionsEnd = formatToLocale(data.civil_twilight_end).split(':')\n  const minutesAdjustment = barWidth / defaultBarWidth\n  const minutes = 60 * minutesAdjustment\n\n  return {\n    start: (Number(newOptionsStart[0]) * minutes + Number(newOptionsStart[1]) * minutesAdjustment) * 100 / barWidth,\n    end: (Number(newOptionsEnd[0]) * minutes + Number(newOptionsEnd[1]) * minutesAdjustment) * 100 / barWidth\n  }\n}","import { \n  useState, \n  useRef, \n  useEffect \n} from 'react'\n\nimport { prepareData, animationStart } from './helpers'\n\nexport const useTwilightBar = (weatherData: any, barWidth: number) => {\n  const [newData, setNewData] = useState({\n    start: 0,\n    end: 0\n  })\n  \n  const usePreviousState = (weatherData: Record<string, string>) => {\n    const ref = useRef() as { current: Record<string, string> }\n    useEffect(() => {\n      ref.current = weatherData\n    })\n    return ref.current\n  }\n\n  const prevState = usePreviousState(weatherData) || weatherData\n\n  // Меняется weatherData и обновляется градиент\n  useEffect(() => {\n    const newData = prepareData(weatherData, barWidth)\n    const oldData = prepareData(prevState, barWidth)\n    const tickStart = (newData.start - oldData.start) / 20\n    const tickEnd = (newData.end - oldData.end) / 20\n\n    animationStart({ \n      data: oldData, \n      action: setNewData,\n      tickStart,\n      tickEnd\n    })\n    //eslint-disable-next-line\n  }, [weatherData])\n\n  const style = {\n    width: `${barWidth}px`,\n    transition: 'background 0.8s linear',\n    background: `linear-gradient(90deg, rgba(2,0,36,1) 0%, rgba(9,9,121,1) ${newData.start - 5}%, rgba(0,212,255,1) ${newData.start}%, rgba(0,212,255,1) ${newData.end}%, rgba(9,9,121,1) ${newData.end + 5}%, rgba(2,0,36,1) 100%)`\n  }\n\n  return {\n    style\n  }\n} \n","import React from 'react'\n\nimport { useTwilightBar } from './useTwilightBar'\nimport { TTwilightBar } from './types'\nimport { defaultBarWidth } from '../../config'\n\nexport const TwilightBar = ({ weatherData, barWidth = defaultBarWidth }: TTwilightBar) => {\n\n  const { style } = useTwilightBar(weatherData, barWidth)\n\n  return (\n    <div className='twilight-container'>\n      <div className='twilight-wrapper' style={style}>\n      </div>\n    </div>\n  )\n}\n\n","import React from 'react'\n\nexport const Loader = () => (\n  <div className='loader-wrapper'>\n    <div className=\"lds-ellipsis\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  </div>\n)","import React, { Fragment} from 'react'\n\nimport { Title } from '../Title'\nimport { InfoBlock } from '../InfoBlock'\nimport { Controls } from '../Controls'\nimport { TwilightBar } from '../TwilightBar'\nimport { useMainBlock } from './useMainBlock'\nimport { Loader } from '../Loader'\n\nexport const MainBlock = () => {\n  const { \n    changeDate,\n    formattedDate,\n    showData,\n    weatherData,\n  } = useMainBlock()\n\n  return (\n    <div className='container'>\n      <div className='main-wrapper'>\n        {showData ?\n          <Fragment>\n            <Title formattedDate={formattedDate}/>\n            <InfoBlock weatherData={weatherData} />\n            <Controls changeDate={changeDate}/>\n            <TwilightBar \n              weatherData={weatherData} \n              barWidth={720}\n            />\n          </Fragment>\n          : <Loader />\n        }\n      </div>\n    </div>\n  )\n}\n","import { \n  useState, \n  useMemo, \n  useEffect\n} from 'react'\n\nimport { BASE_API } from '../../config'\nimport { formatToLocale } from '../../helpers/formatToLocale'\n\nexport const useMainBlock = () => {\n  const [date, changeDate] = useState(new Date())\n  const [weatherData, setWeatherData] = useState({})\n\n  const formattedDate = useMemo(\n    () => `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`,\n    [date]\n  )\n\n  const preparedDate = `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`\n  \n  useEffect(() => {\n    navigator.geolocation && navigator.geolocation.getCurrentPosition(({ coords }) => {\n    fetch(`${BASE_API}?lat=${coords.latitude}&lng=${coords.longitude}&date=${preparedDate}`)\n      .then(response => response.json())\n      .then(({ results }) => {\n        const dayLength = results.day_length.split(':')\n        const formattedData = {\n          ...results,\n          sunrise: formatToLocale(results.sunrise),\n          sunset: formatToLocale(results.sunset),\n          day_length: `${dayLength[0]}:${dayLength[1]}`\n        }\n        setWeatherData(formattedData)\n      })\n      .catch(e => console.log(e))\n    }, ({ message }) => console.warn(message))\n  }, [preparedDate])\n\n  return {\n    changeDate,\n    formattedDate,\n    weatherData,\n    showData: Object.keys(weatherData).length !== 0\n  }\n}","import React from 'react'\n\nimport { MainBlock } from './components/MainBlock'\n\nimport './App.css'\n\nexport const App = () => {\n  return (\n    <div>\n      <MainBlock />\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}